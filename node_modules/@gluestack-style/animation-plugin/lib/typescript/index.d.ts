import React from 'react';
import type { IStyled, IStyledPlugin } from '@gluestack-style/react';
export declare class AnimationResolver implements IStyledPlugin {
    #private;
    name: 'AnimationResolver';
    styledUtils: {
        aliases: {
            readonly ':animate': "animate";
            readonly ':initial': "initial";
            readonly ':exit': "exit";
            readonly ':initialProps': "initialProps";
            readonly ':animateProps': "animateProps";
            readonly ':transition': "transition";
            readonly ':transformOrigin': "transformOrigin";
            readonly ':whileTap': "whileTap";
            readonly ':whileHover': "whileHover";
            readonly ':onAnimationComplete': "onAnimationComplete";
        };
    };
    register(styledUtils: any): void;
    constructor(styledUtils?: IStyled);
    inputMiddleWare(styledObj?: {}, shouldUpdateConfig?: any): {
        [key in keyof typeof this.styledUtils.aliases]: (typeof this.styledUtils.aliases)[key];
    };
    updateStyledObject(styledObject: any, shouldUpdateConfig: boolean, resolvedStyledObject?: any, keyPath?: string[]): any;
    componentMiddleWare({ Component, ExtendedConfig }: any): React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>> | null;
    wrapperComponentMiddleWare(): {
        Component: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>>;
        AnimatePresence: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>>;
    };
}
//# sourceMappingURL=index.d.ts.map